version: '3.8'

services:
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - jsondotpng
    volumes:
      - zookeeper-data:/data
      - zookeeper-datalog:/datalog

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    depends_on:
      - zookeeper
    networks:
      - jsondotpng
    hostname: kafka
    environment:
      KAFKA_CREATE_TOPICS: "events:1:1"
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_LISTENERS: INSIDE://:29092,OUTSIDE://:9092
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://kafka:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - ./data/kafka:/kafka
      - /var/run/docker.sock:/var/run/docker.sock
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  db:
    image: mysql
    container_name: mysql_db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    networks:
      - jsondotpng
    volumes:
      - type: bind
        source: data/database
        target: /var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p1"]
      interval: 20s
      retries: 5
      start_period: 30s
      timeout: 5s

  receiver:
    build:
      context: ./receiver
      dockerfile: Dockerfile
    environment:
      CORS_ALLOW_ALL: yes # Change to yes if you want to allow all requests  
    container_name: receiver
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    networks:
      - jsondotpng
    volumes:
      - ./logs:/app/logs
      - ./config/receiver:/app/config
    user: "nobody"

  storage:
    build:
      context: ./storage
      dockerfile: Dockerfile
    environment:
      CORS_ALLOW_ALL: yes # Change to yes if you want to allow all requests
    container_name: storage
    depends_on:
      db:
        condition: service_started
      kafka:
        condition: service_healthy
    networks:
      - jsondotpng
    volumes:
      - ./logs:/app/logs
      - ./config/storage:/app/config
    user: "nobody"

  processing:
    build:
      context: ./processing
      dockerfile: Dockerfile
    environment:
      CORS_ALLOW_ALL: yes # Change to yes if you want to allow all requests
    container_name: processing
    depends_on:
      storage:
        condition: service_started
    ports:
      - "8100:8100"
    networks:
      - jsondotpng
    volumes:
      - ./logs:/app/logs
      - ./config/processing:/app/config
      - ./data/processing:/app/stats # Persistent JSON storage
    user: "nobody"

  analyzer:
    build:
      context: ./analyzer
      dockerfile: Dockerfile
    environment:
      CORS_ALLOW_ALL: yes # Change to yes if you want to allow all requests  
    container_name: analyzer
    depends_on:
      processing:
        condition: service_started
      kafka:
        condition: service_healthy
    ports:
      - "8110:8110"
    networks:
      - jsondotpng
    volumes:
      - ./logs:/app/logs
      - ./config/analyzer:/app/config
    user: "nobody"

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx_dashboard
    ports:
      - "80:80"
    networks:
      - jsondotpng

networks:
  jsondotpng:
    name: jsondotpng
    driver: bridge

volumes:
  my-db:
  zookeeper-data:
  zookeeper-datalog: